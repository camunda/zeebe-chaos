"use strict";(self.webpackChunkzell_chaos=self.webpackChunkzell_chaos||[]).push([[8243],{38128:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>c});var n=a(71220),s=a(74848),o=a(28453);const r={layout:"posts",title:"Performance of REST API",date:new Date("2025-06-30T00:00:00.000Z"),categories:["chaos_experiment","bpmn"],tags:["availability"],authors:"zell"},i="Chaos Day Summary",l={authorsImageUrls:[void 0]},c=[];function h(e){const t={img:"img",p:"p",strong:"strong",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"In today's Chaos day we wanted to experiment with the new REST API (v2) as a replacement for our previous used gRPC API."}),"\n",(0,s.jsx)(t.p,{children:"Per default, our load tests make use of the gRPC, but as we want to make REST API the default and release this fully with 8.8, we want to make sure to test this accordingly in regard to reliability."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"TL;DR;"})," We observed severe performance regression when using the REST API, even when job streaming is in use by the job workers (over gRPC). Our client seems to have a higher memory consumption, which caused some instabilities in our tests as well. With the new API, we lack certain observability, which makes it harder to dive into certain details. We should investigate this further and find potential bottlenecks and improvements."]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"general",src:a(84298).A+"",width:"1879",height:"879"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},84298:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/general-overview-a0c6c48be94b9a8aa8cbbd3b44830a67.png"},28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>i});var n=a(96540);const s={},o=n.createContext(s);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(o.Provider,{value:t},e.children)}},71220:e=>{e.exports=JSON.parse('{"permalink":"/zeebe-chaos/2025/06/30/Performance-of-REST-API","editUrl":"https://github.com/camunda/zeebe-chaos/blob/master/chaos-days/blog/2025-06-30-Performance-of-REST-API/index.md","source":"@site/blog/2025-06-30-Performance-of-REST-API/index.md","title":"Performance of REST API","description":"In today\'s Chaos day we wanted to experiment with the new REST API (v2) as a replacement for our previous used gRPC API.","date":"2025-06-30T00:00:00.000Z","tags":[{"inline":true,"label":"availability","permalink":"/zeebe-chaos/tags/availability"}],"readingTime":6.2,"hasTruncateMarker":true,"authors":[{"name":"Christopher Kujawa","title":"Chaos Engineer @ Zeebe","url":"https://github.com/ChrisKujawa","page":{"permalink":"/zeebe-chaos/authors/zell"},"imageURL":"https://github.com/ChrisKujawa.png","key":"zell"}],"frontMatter":{"layout":"posts","title":"Performance of REST API","date":"2025-06-30T00:00:00.000Z","categories":["chaos_experiment","bpmn"],"tags":["availability"],"authors":"zell"},"unlisted":false,"nextItem":{"title":"How does Zeebe behave with NFS","permalink":"/zeebe-chaos/2025/06/12/How-does-Zeebe-behave-with-NFS"}}')}}]);