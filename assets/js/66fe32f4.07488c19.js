"use strict";(self.webpackChunkzell_chaos=self.webpackChunkzell_chaos||[]).push([[2253],{59222:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var a=n(74848),s=n(28453);const i={layout:"posts",title:"Gateway memory consumption",date:new Date("2020-10-20T00:00:00.000Z"),categories:["chaos_experiment","gateway","resources"],authors:"zell"},o="Chaos Day Summary",r={permalink:"/zeebe-chaos/2020/10/27/standalone-gw-memory",editUrl:"https://github.com/zeebe-io/zeebe-chaos/blob/master/chaos-days/blog/2020-10-27-standalone-gw-memory/index.md",source:"@site/blog/2020-10-27-standalone-gw-memory/index.md",title:"Gateway memory consumption",description:"In the last weeks I check multiple benchmarks and clusters in incidents. Often I had the feeling that the memory consumption from the gateway is not ideal",date:"2020-10-20T00:00:00.000Z",tags:[],readingTime:3.775,hasTruncateMarker:!0,authors:[{name:"Christopher Kujawa",title:"Chaos Engineer @ Zeebe",url:"https://github.com/zelldon",page:{permalink:"/zeebe-chaos/authors/zell"},imageURL:"https://github.com/zelldon.png",key:"zell"}],frontMatter:{layout:"posts",title:"Gateway memory consumption",date:"2020-10-20T00:00:00.000Z",categories:["chaos_experiment","gateway","resources"],authors:"zell"},unlisted:!1,prevItem:{title:"Non-graceful Shutdown Broker",permalink:"/zeebe-chaos/2020/10/20/non-graceful-shutdown"},nextItem:{title:"Multiple Leader Changes",permalink:"/zeebe-chaos/2020/10/13/multiple-leader-changes"}},l={authorsImageUrls:[void 0]},c=[{value:"Chaos experiment",id:"chaos-experiment",level:2},{value:"Expected",id:"expected",level:3},{value:"Actual",id:"actual",level:3},{value:"Conclusion",id:"conclusion",level:3},{value:"Other Observations",id:"other-observations",level:3},{value:"SerialGC usage",id:"serialgc-usage",level:4},{value:"Unexpected responses",id:"unexpected-responses",level:4},{value:"New Issues",id:"new-issues",level:2},{value:"Participants",id:"participants",level:2}];function h(e){const t={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["In the last weeks I check multiple benchmarks and clusters in incidents. Often I had the feeling that the memory consumption from the gateway is not ideal\nor that there is a memory leak. I wanted to experiment regarding this memory consumptions. Since we saw in investigating ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/issues/5641",children:"https://github.com/zeebe-io/zeebe/issues/5641"})," a high memory spike\nwhen the gateway was not able to talk to other nodes I suspected that here might be some bugs hiding"]}),"\n",(0,a.jsx)(t.h2,{id:"chaos-experiment",children:"Chaos experiment"}),"\n",(0,a.jsx)(t.p,{children:"We will run the Standalone gateway without the brokers and put load on it."}),"\n",(0,a.jsx)(t.h3,{id:"expected",children:"Expected"}),"\n",(0,a.jsx)(t.p,{children:"All requests are rejected by the gateway and the memory doesn't grow infinitly on a steady load. The memory consumption should be stable at some point."}),"\n",(0,a.jsx)(t.h3,{id:"actual",children:"Actual"}),"\n",(0,a.jsxs)(t.p,{children:["First I run the standalone gateway without any load. It seems that benchmarks without brokers are not shown in our dashboard namespaces. I fixed that for my experiment in my local grafana session. The issue was that we search for a ",(0,a.jsx)(t.code,{children:"atomix_role"})," metric to get the related namespaces. This metrics is only published on broker side."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(6845).A+"",width:"1833",height:"708"})}),"\n",(0,a.jsx)(t.p,{children:"We can see that even if there is no load the memory is already growing."}),"\n",(0,a.jsx)(t.p,{children:"Putting more load on it showed that it doesn't drastically increase the memory consumption, but still it was growing."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(5878).A+"",width:"1833",height:"721"})}),"\n",(0,a.jsxs)(t.p,{children:["I think the issue here is that we currently have no limits set for the gateway, which means it will use as many as it can. There is also no pressure for the GC to run or reclaim memory.\nWe probably want to limit it at somepoint. I created an issue for it ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/issues/5699",children:"#5699"})," In order to find out whether we have a memory leak I used a profiler."]}),"\n",(0,a.jsx)(t.p,{children:"I restarted the experiment with new settings:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"# JavaOpts:\n# DEFAULTS\nJavaOpts: >-\n  # other options\n  -Djava.rmi.server.hostname=127.0.0.1\n  -Dcom.sun.management.jmxremote.port=9010\n  -Dcom.sun.management.jmxremote.rmi.port=9010\n  -Dcom.sun.management.jmxremote.authenticate=false\n  -Dcom.sun.management.jmxremote.ssl=false\n  -Dcom.sun.management.jmxremote.local.only=false\n"})}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["This will open a remote, unauthenticated, plaintext JMX connection - do not use this configuration in production!\nSee ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/blob/develop/benchmarks/docs/debug/README.md#remote_jmx",children:"https://github.com/zeebe-io/zeebe/blob/develop/benchmarks/docs/debug/README.md#remote_jmx"})]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"After I added a port forwarding I was able to open an JMX connection with Java Mission Control."}),"\n",(0,a.jsx)(t.h3,{id:"conclusion",children:"Conclusion"}),"\n",(0,a.jsx)(t.p,{children:"I profiled the gateway with and without load but haven't found any memory leak so far."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(72543).A+"",width:"1555",height:"921"})}),"\n",(0,a.jsx)(t.p,{children:"Also with VisualVM and triggering multiple GC's I was not able to spot any thing problematic."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(35171).A+"",width:"1546",height:"803"})}),"\n",(0,a.jsxs)(t.p,{children:["In order to avoid that it uses too much memory and the memory continously grows we should set a limit for the Gateway (",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/issues/5699",children:"#5699"}),")."]}),"\n",(0,a.jsx)(t.h3,{id:"other-observations",children:"Other Observations"}),"\n",(0,a.jsx)(t.h4,{id:"serialgc-usage",children:"SerialGC usage"}),"\n",(0,a.jsx)(t.p,{children:"Java Mission Control reported as an error that on a multi-core machine the serial garabage collector was used.\nIf we check the JVM properties we can see that as well."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(60754).A+"",width:"1140",height:"645"})}),"\n",(0,a.jsxs)(t.p,{children:['This is weird because we don\'t set any GC in our benchmarks, so I would suspect the G1 is used with Java 11. Unfortunately this depends on the available resources which are "detected" by the JVM.\nRelated to that ',(0,a.jsx)(t.a,{href:"https://stackoverflow.com/questions/52474162/why-is-serialgc-chosen-over-g1gc",children:"https://stackoverflow.com/questions/52474162/why-is-serialgc-chosen-over-g1gc"}),"\nI think we should investigate that further, because we can see in Java mission control that we have GC pauses up to 8 seconds! I created a new issue for it ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/issues/5700",children:"#5700"}),"."]}),"\n",(0,a.jsx)(t.h4,{id:"unexpected-responses",children:"Unexpected responses"}),"\n",(0,a.jsxs)(t.p,{children:["When we start the ",(0,a.jsx)(t.code,{children:"starters"})," they will first try to deploy a workflow model and loop in this state until they succeed.\nIn the metrics we can see that the responses to the deployment commands are ",(0,a.jsx)(t.code,{children:"NOT_FOUND"})," instead of ",(0,a.jsx)(t.code,{children:"PARTITION_NOT_AVAILABLE"}),", which I would expect."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:n(8029).A+"",width:"1820",height:"300"})}),"\n",(0,a.jsx)(t.p,{children:"We can also see that in the log of the starter:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{children:"11:01:18.035 [main] WARN  io.zeebe.Starter - Failed to deploy workflow, retrying\nio.zeebe.client.api.command.ClientStatusException: Expected to execute command, but this command refers to an element that doesn't exist.\n\tat io.zeebe.client.impl.ZeebeClientFutureImpl.transformExecutionException(ZeebeClientFutureImpl.java:93) ~[app.jar:0.24.2]\n\tat io.zeebe.client.impl.ZeebeClientFutureImpl.join(ZeebeClientFutureImpl.java:50) ~[app.jar:0.24.2]\n\tat io.zeebe.Starter.deployWorkflow(Starter.java:128) [app.jar:0.24.2]\n\tat io.zeebe.Starter.run(Starter.java:55) [app.jar:0.24.2]\n\tat io.zeebe.App.createApp(App.java:50) [app.jar:0.24.2]\n\tat io.zeebe.Starter.main(Starter.java:142) [app.jar:0.24.2]\nCaused by: java.util.concurrent.ExecutionException: io.grpc.StatusRuntimeException: NOT_FOUND: Expected to execute command, but this command refers to an element that doesn't exist.\n\tat java.util.concurrent.CompletableFuture.reportGet(Unknown Source) ~[?:?]\n\tat java.util.concurrent.CompletableFuture.get(Unknown Source) ~[?:?]\n\tat io.zeebe.client.impl.ZeebeClientFutureImpl.join(ZeebeClientFutureImpl.java:48) ~[app.jar:0.24.2]\n\t... 4 more\nCaused by: io.grpc.StatusRuntimeException: NOT_FOUND: Expected to execute command, but this command refers to an element that doesn't exist.\n\tat io.grpc.Status.asRuntimeException(Status.java:533) ~[app.jar:0.24.2]\n\tat io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:460) ~[app.jar:0.24.2]\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39) ~[app.jar:0.24.2]\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23) ~[app.jar:0.24.2]\n\tat me.dinowernli.grpc.prometheus.MonitoringClientCallListener.onClose(MonitoringClientCallListener.java:50) ~[app.jar:0.24.2]\n\tat io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:426) ~[app.jar:0.24.2]\n\tat io.grpc.internal.ClientCallImpl.access$500(ClientCallImpl.java:66) ~[app.jar:0.24.2]\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.close(ClientCallImpl.java:689) ~[app.jar:0.24.2]\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.access$900(ClientCallImpl.java:577) ~[app.jar:0.24.2]\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInternal(ClientCallImpl.java:751) ~[app.jar:0.24.2]\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:740) ~[app.jar:0.24.2]\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37) ~[app.jar:0.24.2]\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123) ~[app.jar :0.24.2]\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source) ~[?:?]\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source) ~[?:?]\n\tat java.lang.Thread.run(Unknown Source) ~[?:?]\n"})}),"\n",(0,a.jsxs)(t.p,{children:["This doesn't make any sense. I created a new issue for it ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/issues/5702",children:"#5702"})]}),"\n",(0,a.jsx)(t.h2,{id:"new-issues",children:"New Issues"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Limit Gateway ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/issues/5699",children:"https://github.com/zeebe-io/zeebe/issues/5699"})]}),"\n",(0,a.jsxs)(t.li,{children:["SerialGC usage ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/issues/5700",children:"https://github.com/zeebe-io/zeebe/issues/5700"})]}),"\n",(0,a.jsxs)(t.li,{children:["Wrong error response on deployment command ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe/issues/5702",children:"https://github.com/zeebe-io/zeebe/issues/5702"})]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"participants",children:"Participants"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"@zelldon"}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},60754:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/gc-settings-f4dcdc35aa83cff6c3e04b8236d7f227.png"},5878:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/memory-gw-no-broker-high-load-79c5d9ec96d30db64a3e527e368deb57.png"},6845:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/memory-gw-no-broker-no-load-573bc03afb7f975be6703ed7d306354a.png"},72543:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/result-e55c32125c64c4cb680c4df77b690dbd.png"},8029:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/unexepcted-result-e571536d49a097f1e4feedcd0a10a61e.png"},35171:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/visualvm-2a1bba44385aa57d3754764946e36e37.png"},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var a=n(96540);const s={},i=a.createContext(s);function o(e){const t=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);