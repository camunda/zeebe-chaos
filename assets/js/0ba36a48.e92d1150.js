"use strict";(self.webpackChunkzell_chaos=self.webpackChunkzell_chaos||[]).push([[274],{10245:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(74848),l=a(28453);const o={layout:"posts",title:"Handling of Big Variables",date:new Date("2022-01-19T00:00:00.000Z"),categories:["chaos_experiment","bpmn","variables"],tags:["availability"],authors:"zell"},r="Chaos Day Summary",s={permalink:"/zeebe-chaos/2022/01/19/big-variables",editUrl:"https://github.com/zeebe-io/zeebe-chaos/blob/master/chaos-days/blog/2022-01-19-big-variables/index.md",source:"@site/blog/2022-01-19-big-variables/index.md",title:"Handling of Big Variables",description:"New Year;New Chaos",date:"2022-01-19T00:00:00.000Z",tags:[{inline:!0,label:"availability",permalink:"/zeebe-chaos/tags/availability"}],readingTime:5.29,hasTruncateMarker:!0,authors:[{name:"Christopher Kujawa",title:"Chaos Engineer @ Zeebe",url:"https://github.com/zelldon",imageURL:"https://github.com/zelldon.png",key:"zell",page:null}],frontMatter:{layout:"posts",title:"Handling of Big Variables",date:"2022-01-19T00:00:00.000Z",categories:["chaos_experiment","bpmn","variables"],tags:["availability"],authors:"zell"},unlisted:!1,prevItem:{title:"High Snapshot Frequency",permalink:"/zeebe-chaos/2022/02/01/High-Snapshot-Frequency"},nextItem:{title:"Worker count should not impact performance",permalink:"/zeebe-chaos/2021/11/24/Worker-count-should-not-impact-performance"}},i={authorsImageUrls:[void 0]},c=[{value:"Chaos Experiment",id:"chaos-experiment",level:2},{value:"Expected",id:"expected",level:3},{value:"Actual",id:"actual",level:3},{value:"Base",id:"base",level:4},{value:"Small Payload",id:"small-payload",level:4},{value:"Big Payload",id:"big-payload",level:4},{value:"Increasing Resources",id:"increasing-resources",level:5},{value:"Camunda Cloud",id:"camunda-cloud",level:3},{value:"Result",id:"result",level:3},{value:"Found Bugs",id:"found-bugs",level:3},{value:"Message pack is not valid",id:"message-pack-is-not-valid",level:2},{value:"Configure the Starter payload",id:"configure-the-starter-payload",level:2}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{Details:o}=t;return o||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(t.p,{children:["New Year;:tada",":New"," Chaos","\ud83d\udc12"]}),"\n",(0,n.jsxs)(t.p,{children:['This time I wanted to experiment with "big" variables. Zeebe supports a ',(0,n.jsx)(t.code,{children:"maxMessageSize"})," of 4 MB, which is quite big. In general, it should be clear that using big variables will cause performance issues, but today I also want to find out whether the system can handle big variables (~1 MB) at all."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"TL;DR;"})," Our Chaos experiment failed! Zeebe and Camunda Cloud is not able to handle (per default) big variables (~1 MB) without issues."]}),"\n",(0,n.jsx)(t.h2,{id:"chaos-experiment",children:"Chaos Experiment"}),"\n",(0,n.jsxs)(t.p,{children:["Normally we run our benchmarks with ~32 KB payload size. This time we want to try out a payload size of ~1 MB and verify whether the system can handle such payload sizes. The payload we use can be found ",(0,n.jsx)(t.a,{href:"pathname://big_payload.json",children:"here"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["The benchmark setup, is similar to default Zeebe benchmarks you can find ",(0,n.jsx)(t.a,{href:"https://github.com/camunda-cloud/zeebe/tree/develop/benchmarks/setup/default",children:"here"}),". To make it work and fair we updated the starter and worker resources for both, base and the chaos cluster."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-diff",children:'diff --git a/benchmarks/setup/default/starter.yaml b/benchmarks/setup/default/starter.yaml\nindex 78c6e81dbb..d0404d4d3e 100644\n--- a/benchmarks/setup/default/starter.yaml\n+++ b/benchmarks/setup/default/starter.yaml\n@@ -30,11 +30,11 @@ spec:\n             value: "warn"\n         resources:\n           limits:\n-            cpu: 250m\n-            memory: 256Mi\n+            cpu: 1G\n+            memory: 2Gi\n           requests:\n-            cpu: 250m\n-            memory: 256Mi\n+            cpu: 1G\n+            memory: 2Gi\n ---\n apiVersion: v1\n kind: Service\ndiff --git a/benchmarks/setup/default/worker.yaml b/benchmarks/setup/default/worker.yaml\nindex cd6f5ffeb6..05b195291f 100644\n--- a/benchmarks/setup/default/worker.yaml\n+++ b/benchmarks/setup/default/worker.yaml\n@@ -31,11 +31,11 @@ spec:\n             value: "warn"\n         resources:\n           limits:\n-            cpu: 500m\n-            memory: 256Mi\n+            cpu: 1G\n+            memory: 1Gi\n           requests:\n-            cpu: 500m\n-            memory: 256Mi\n+            cpu: 1G\n+            memory: 1Gi\n'})}),"\n",(0,n.jsx)(t.h3,{id:"expected",children:"Expected"}),"\n",(0,n.jsx)(t.p,{children:"It is expected that the performance will drop, we formulate the following hypothesis."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.strong,{children:"Hypothesis: With a bigger payload size of e.g. 1 MB, Zeebe should be still able to handle process instances, maybe under a degraded performance, but in general the availability must not suffer from such a payload size."})}),"\n",(0,n.jsx)(t.h3,{id:"actual",children:"Actual"}),"\n",(0,n.jsx)(t.h4,{id:"base",children:"Base"}),"\n",(0,n.jsx)(t.p,{children:"We started a base benchmark with ~32 KB to verify how it looks like normally."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"base",src:a(73911).A+"",width:"1838",height:"912"})}),"\n",(0,n.jsx)(t.h4,{id:"small-payload",children:"Small Payload"}),"\n",(0,n.jsxs)(t.p,{children:["In order to verify how Zeebe handles different payload, we first started with a small payload ~130 bytes, which is part of the Starter application (called ",(0,n.jsx)(t.code,{children:"small_payload.json"}),")."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"small-payload",src:a(25659).A+"",width:"1835",height:"910"})}),"\n",(0,n.jsx)(t.p,{children:"We can see that the system handles such payload without any issues, and we can reach ~190 process instances per second (PI/s)."}),"\n",(0,n.jsx)(t.h4,{id:"big-payload",children:"Big Payload"}),"\n",(0,n.jsx)(t.p,{children:"After running with a small payload, we changed the payload to a size of ~1 MB. This immediately broke the standalone gateways."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"big-payload",src:a(17086).A+"",width:"1835",height:"904"})}),"\n",(0,n.jsx)(t.p,{children:"The gateways went out of memory (OOM) in a loop. No processing was made in this time."}),"\n",(0,n.jsx)(t.h5,{id:"increasing-resources",children:"Increasing Resources"}),"\n",(0,n.jsx)(t.p,{children:"In order to continue the experiment and to verify how Zeebe itself can handle it, we increased the gateway resources."}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-diff",children:"diff --git a/benchmarks/setup/default/zeebe-values.yaml b/benchmarks/setup/default/zeebe-values.yaml\nindex 371ba538dc..7a11c10366 100644\n--- a/benchmarks/setup/default/zeebe-values.yaml\n+++ b/benchmarks/setup/default/zeebe-values.yaml\n@@ -38,10 +38,10 @@ gateway:\n   resources:\n     limits:\n       cpu: 1\n-      memory: 512Mi\n+      memory: 4Gi\n     requests:\n       cpu: 1\n-      memory: 512Mi\n+      memory: 4Gi\n"})}),"\n",(0,n.jsx)(t.p,{children:"But this doesn't help. The gateway went no longer OOM, but it was still not able to handle the payload."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"increase-res",src:a(7486).A+"",width:"1834",height:"912"})}),"\n",(0,n.jsx)(t.p,{children:'We can see that in a short period of time some events have been processed (small spike in the "Current Events" panel), but this stopped quite fast again. In the gateway logs there are endless warnings:'}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:'Warning 2022-01-20 10:09:32.644 CET zeebe-cluster-helm "Stream Error"\nWarning 2022-01-20 10:09:56.847 CET zeebe-cluster-helm "Stream Error"\n'})}),"\n",(0,n.jsxs)(t.p,{children:["With an underlying exception: ",(0,n.jsx)(t.code,{children:"io.netty.handler.codec.http2.Http2Exception$StreamException: Stream closed before write could take place"})]}),"\n",(0,n.jsxs)(o,{children:[(0,n.jsx)("summary",{children:"Stacktrace"}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:"io.netty.handler.codec.http2.Http2Exception$StreamException: Stream closed before write could take place\n\tat io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:172) ~[netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$FlowState.cancel(DefaultHttp2RemoteFlowController.java:481) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$1.onStreamClosed(DefaultHttp2RemoteFlowController.java:105) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:357) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1007) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.deactivate(DefaultHttp2Connection.java:963) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2Connection$DefaultStream.close(DefaultHttp2Connection.java:515) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2Connection$DefaultStream.close(DefaultHttp2Connection.java:521) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.closeStream(Http2ConnectionHandler.java:613) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onRstStreamRead(DefaultHttp2ConnectionDecoder.java:444) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onRstStreamRead(Http2InboundFrameLogger.java:80) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readRstStreamFrame(DefaultHttp2FrameReader.java:509) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:259) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:159) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:41) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:173) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:378) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:438) [netty-codec-http2-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:510) [netty-codec-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:449) [netty-codec-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:279) [netty-codec-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) [netty-transport-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) [netty-transport-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357) [netty-transport-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) [netty-transport-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379) [netty-transport-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365) [netty-transport-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) [netty-transport-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:795) [netty-transport-classes-epoll-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:480) [netty-transport-classes-epoll-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378) [netty-transport-classes-epoll-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:986) [netty-common-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) [netty-common-4.1.73.Final.jar:4.1.73.Final]\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.73.Final.jar:4.1.73.Final]\n\tat java.lang.Thread.run(Unknown Source)\n"})})]}),"\n",(0,n.jsx)(t.p,{children:"On the client side we can see that the Zeebe cluster seems to be unavailable."}),"\n",(0,n.jsx)(t.h3,{id:"camunda-cloud",children:"Camunda Cloud"}),"\n",(0,n.jsx)(t.p,{children:"We wanted to verify how Camunda Cloud and our standard Cluster plan (GA Hardware Plan) handles such a payload. But the result was the same."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"cc-general",src:a(42138).A+"",width:"1835",height:"882"})}),"\n",(0,n.jsx)(t.p,{children:"The processing stopped quite fast due to OOM of the gateway. We can see that operate is also not able to handle such load."}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"failed-op",src:a(83811).A+"",width:"1866",height:"713"})}),"\n",(0,n.jsx)(t.p,{children:"In our console overview we see that all services (exception Zeebe) went unhealthy"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"console-healthy",src:a(66492).A+"",width:"739",height:"733"})}),"\n",(0,n.jsx)(t.h3,{id:"result",children:"Result"}),"\n",(0,n.jsxs)(t.blockquote,{children:["\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:"Hypothesis: With a bigger payload size of e.g. 1 MB Zeebe, should be still able to handle process instances, maybe under a degraded performance but in general the availability must not suffer from such a payload size."})}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"We were not able to validate our hypothesis, which means our chaos experiment failed!"})," ","\ud83d\udca5"]}),"\n",(0,n.jsx)(t.h3,{id:"found-bugs",children:"Found Bugs"}),"\n",(0,n.jsx)(t.p,{children:"We opened the following bug issues:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Gateway can't handle bigger payload sizes ",(0,n.jsx)(t.a,{href:"https://github.com/camunda-cloud/zeebe/issues/8621",children:"#8621"})]}),"\n"]}),"\n",(0,n.jsx)(t.h1,{id:"outtakes",children:"Outtakes"}),"\n",(0,n.jsx)(t.p,{children:"Interesting issues I run into when doing the chaos experiment, could be count as TIL events and mentioning them might help others."}),"\n",(0,n.jsx)(t.h2,{id:"message-pack-is-not-valid",children:"Message pack is not valid"}),"\n",(0,n.jsx)(t.p,{children:"When I first generated the JSON payload, it was an array on root level, which is not supported by Zeebe."}),"\n",(0,n.jsx)(t.p,{children:"I spent sometime to understand why I see no progress in processing. Taking a look at the gateway logs we can see:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"\"Expected to handle gRPC request, but messagepack property was invalid: io.camunda.zeebe.msgpack.MsgpackPropertyException: Property 'variables' is invalid: Expected document to be a root level object, but was 'ARRAY'\""})}),"\n",(0,n.jsx)(t.p,{children:"On the client side (if the logging is turned on, starter needs info logging) we see:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.code,{children:"INVALID_ARGUMENT: Property 'variables' is invalid: Expected document to be a root level object, but was 'ARRAY'"})}),"\n",(0,n.jsx)(t.h2,{id:"configure-the-starter-payload",children:"Configure the Starter payload"}),"\n",(0,n.jsxs)(t.p,{children:["In order to use different JSON payload for the starter we support a configuration on the starter application (",(0,n.jsx)(t.code,{children:"-Dapp.starter.payloadPath"}),"). I had a lot of ",(0,n.jsx)(t.em,{children:'"fun"'})," to find out the right syntax:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:['-Dapp.starter.payloadPath="bpmn/small_payload.json" - ',(0,n.jsx)(t.em,{children:"DOESN'T WORK"})]}),"\n",(0,n.jsxs)(t.li,{children:['-Dapp.starter.payloadPath="/bpmn/small_payload.json" - ',(0,n.jsx)(t.em,{children:"DOESN'T WORK"})]}),"\n",(0,n.jsxs)(t.li,{children:["-Dapp.starter.payloadPath=/bpmn/small_payload.json - ",(0,n.jsx)(t.em,{children:"DOESN'T WORK"})]}),"\n",(0,n.jsxs)(t.li,{children:["-Dapp.starter.payloadPath=bpmn/big_payload.json - ",(0,n.jsx)(t.em,{children:"WORKS"})]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["So be aware don't use ",(0,n.jsx)(t.code,{children:'"'})," and no ",(0,n.jsx)(t.code,{children:"/"})," in front, otherwise you might get a ",(0,n.jsx)(t.code,{children:'java.io.FileNotFoundException: "bpmn/small_payload.json" (No such file or directory)'})," in your starter deployment and wonder why you see no progress."]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},73911:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/base-general-6f2d98f4e1437e7d6ccaeb9106e1ad4e.png"},7486:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/big-payload-increase-res-ccf66088a1363c2c7bbf3d10cd430c9e.png"},17086:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/big-payload-starter-gw-restarts-18e517c14c161d58190bd23b618b87cf.png"},42138:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/cc-general-bd2b9235be276f75cd8c485229bf9b44.png"},66492:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/console-healthy-23ed317bbe9dc53934403731fb72b55c.png"},83811:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/failed-operate-6cc764529ec07f8c422fb62e53289a02.png"},25659:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/small-payload-7275166d05a6c32e2a0e7d86125f3c44.png"},28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>s});var n=a(96540);const l={},o=n.createContext(l);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);