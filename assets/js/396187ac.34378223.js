"use strict";(self.webpackChunkzell_chaos=self.webpackChunkzell_chaos||[]).push([[1931],{79884:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var i=t(35721),r=t(74848),s=t(28453);const a={layout:"posts",title:"Follow up REST API performance",date:new Date("2025-07-02T00:00:00.000Z"),categories:["chaos_experiment","bpmn"],tags:["availability"],authors:"zell"},o=void 0,l={authorsImageUrls:[void 0]},c=[{value:"Investigating REST API performance",id:"investigating-rest-api-performance",level:2}];function h(e){const n={em:"em",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"investigating-rest-api-performance",children:"Investigating REST API performance"}),"\n",(0,r.jsx)(n.p,{children:"At this point in time, we don't have one root cause identified. As it is often the case with such performance issues, it is the combination of several things."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TL;DR;"})," We are actively investigating and trying to improve our implementation regarding this topic."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Potential topics we want to look at and improve next:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Improve the web filter chaining from Spring","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Make use of PathPattern instead of the legacy AntPath parser"}),"\n",(0,r.jsx)(n.li,{children:"Investigate whether we can reduce filters"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Refactor REST API response handling","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Make use of separate thread pool (instead of ForkJoinPool) - make use of VT?"}),"\n",(0,r.jsx)(n.li,{children:"Investigate different send methods from BrokerClient"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Client applications","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Investigate Job worker implementation - job push vs job activation"}),"\n",(0,r.jsx)(n.li,{children:"Investigate how endpoint resolution works with a headless service - returning multiple endpoints"}),"\n",(0,r.jsx)(n.li,{children:"Fix starter and worker applications of benchmark project - remove blocking queues, etc."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"What we have done and validated so far:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Investigated existing REST api metrics + breakdown metrics to have a better overview of where time is spent"}),"\n",(0,r.jsx)(n.li,{children:"Investigated worker failing with OOM - due to performance issue and using a queue to store the response futures"}),"\n",(0,r.jsx)(n.li,{children:"Increase CPU resources to understand whether it is resource contention - it is."}),"\n",(0,r.jsxs)(n.li,{children:["Improve Spring request filtering and execution","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use virtual threads for Spring"}),"\n",(0,r.jsx)(n.li,{children:"Use PathPattern instead of legacy AntPathPattern"}),"\n",(0,r.jsx)(n.li,{children:"Use direct response handling instead of asynchronous"}),"\n",(0,r.jsx)(n.li,{children:"Combine some of them"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Observe, profile, and investigate performance further","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Take JFR recordings and profile the system"}),"\n",(0,r.jsx)(n.li,{children:"Make use of the async profiler"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"From what we observed is that some load tests can run stable for quite a while, until they break down. It is often related to restarts/rescheduling, or already in general suboptimal resource distribution. At some point, the CPU throttling increases, and then the performance breaks down."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"all-namespaces-throughput",src:t(42733).A+"",width:"2561",height:"860"})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},42733:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/all-namespaces-throughput-1e62889524faaeec5cd7fb3052db4f04.png"},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},35721:e=>{e.exports=JSON.parse('{"permalink":"/zeebe-chaos/2025/07/02/Follow-up-REST-API-performance","editUrl":"https://github.com/camunda/zeebe-chaos/blob/master/chaos-days/blog/2025-07-02-Follow-up-REST-API-performance/index.md","source":"@site/blog/2025-07-02-Follow-up-REST-API-performance/index.md","title":"Follow up REST API performance","description":"Investigating REST API performance","date":"2025-07-02T00:00:00.000Z","tags":[{"inline":true,"label":"availability","permalink":"/zeebe-chaos/tags/availability"}],"readingTime":14.945,"hasTruncateMarker":true,"authors":[{"name":"Christopher Kujawa","title":"Chaos Engineer @ Zeebe","url":"https://github.com/ChrisKujawa","page":{"permalink":"/zeebe-chaos/authors/zell"},"imageURL":"https://github.com/ChrisKujawa.png","key":"zell"}],"frontMatter":{"layout":"posts","title":"Follow up REST API performance","date":"2025-07-02T00:00:00.000Z","categories":["chaos_experiment","bpmn"],"tags":["availability"],"authors":"zell"},"unlisted":false,"nextItem":{"title":"Performance of REST API","permalink":"/zeebe-chaos/2025/06/30/Performance-of-REST-API"}}')}}]);