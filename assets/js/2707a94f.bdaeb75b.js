"use strict";(self.webpackChunkzell_chaos=self.webpackChunkzell_chaos||[]).push([[7033],{71660:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>h,default:()=>l,frontMatter:()=>i,metadata:()=>n,toc:()=>o});var n=s(58654),a=s(74848),r=s(28453);const i={layout:"posts",title:"Throughput on big state",date:new Date("2021-10-29T00:00:00.000Z"),categories:["chaos_experiment","bpmn","processing"],tags:["performance"],authors:"zell"},h="Chaos Day Summary",c={authorsImageUrls:[void 0]},o=[{value:"Chaos Experiment",id:"chaos-experiment",level:2},{value:"Experiment One",id:"experiment-one",level:3},{value:"Expected",id:"expected",level:4},{value:"Actual",id:"actual",level:4},{value:"Experiment Two",id:"experiment-two",level:3},{value:"Expected",id:"expected-1",level:4},{value:"Actual",id:"actual-1",level:4},{value:"Experiment Three",id:"experiment-three",level:3},{value:"Result",id:"result",level:2}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(t.p,{children:["In this chaos day we wanted to prove the hypothesis that the throughput should not significantly change even if we have bigger state, see ",(0,a.jsx)(t.a,{href:"https://github.com/zeebe-io/zeebe-chaos/issues/64",children:"zeebe-chaos#64"})]}),"\n",(0,a.jsxs)(t.p,{children:["This came up due observations from the ",(0,a.jsx)(t.a,{href:"/zeebe-chaos/2021/10/05/recovery-time",children:"last chaos day"}),". We already had a bigger investigation here ",(0,a.jsx)(t.a,{href:"https://github.com/camunda-cloud/zeebe/issues/7955",children:"zeebe#7955"}),"."]}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"TL;DR;"})," We were not able to prove the hypothesis. Bigger state, more than 100k+ process instances in the state, seems to have an big impact on the processing throughput."]}),"\n",(0,a.jsx)(t.h2,{id:"chaos-experiment",children:"Chaos Experiment"}),"\n",(0,a.jsxs)(t.p,{children:["Similar to the ",(0,a.jsx)(t.a,{href:"/zeebe-chaos/2021/10/05/recovery-time",children:"last chaos day"})," we set up three brokers, with one partition and replication factor three."]}),"\n",(0,a.jsxs)(t.p,{children:["As first part of the experiment we start some amount of instances, afterwards we want to complete them with our workers. Based on the ",(0,a.jsx)(t.a,{href:"/zeebe-chaos/2021/10/05/recovery-time",children:"last chaos day"})," we know what we can complete ~100 process instances with one worker and a capacity of ",(0,a.jsx)(t.code,{children:"12"}),". An example worker configuration can be found ",(0,a.jsx)(t.a,{href:"https://github.com/camunda-cloud/zeebe/blob/develop/benchmarks/setup/default/worker.yaml",children:"here"})]}),"\n",(0,a.jsx)(t.p,{children:"We changed the following:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-sh",children:"$ diff default/worker.yaml zell-chaos/worker.yaml \n11c11\n<   replicas: 12\n---\n>   replicas: 1\n26c26\n<               -Dapp.worker.capacity=120\n---\n>               -Dapp.worker.capacity=12\n"})}),"\n",(0,a.jsx)(t.h3,{id:"experiment-one",children:"Experiment One"}),"\n",(0,a.jsxs)(t.p,{children:["As first experiment we start with creating ",(0,a.jsx)(t.code,{children:"100.000"})," instances, afterwards we start the worker."]}),"\n",(0,a.jsxs)(t.p,{children:["In order to do that easily we can configure the ",(0,a.jsx)(t.a,{href:"https://github.com/camunda-cloud/zeebe/blob/develop/benchmarks/setup/default/starter.yaml",children:"starter"})," and reduce the rate to ",(0,a.jsx)(t.code,{children:"100"})," and set the duration limit to ",(0,a.jsx)(t.code,{children:"1000"}),". This means it will run for ",(0,a.jsx)(t.code,{children:"1000"})," second and start each second ",(0,a.jsx)(t.code,{children:"100"})," instances (which makes ",(0,a.jsx)(t.code,{children:"100.000"}),")."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"$ diff default/starter.yaml zell-chaos/starter.yaml \n24,26c24,26\n<               -Dapp.starter.rate=200\n<               -Dapp.starter.durationLimit=0\n---\n>               -Dapp.starter.rate=100\n>               -Dapp.starter.durationLimit=1000\n"})}),"\n",(0,a.jsx)(t.h4,{id:"expected",children:"Expected"}),"\n",(0,a.jsxs)(t.p,{children:["We expected that we can create ",(0,a.jsx)(t.code,{children:"100.000"})," instances and can complete them with a rate of ",(0,a.jsx)(t.code,{children:"~100"}),", as we have seen in other experiments."]}),"\n",(0,a.jsx)(t.h4,{id:"actual",children:"Actual"}),"\n",(0,a.jsx)(t.p,{children:"We were able to create all instances without any issues."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(32412).A+"",width:"1824",height:"654"})}),"\n",(0,a.jsx)(t.p,{children:"We were able to complete all instances without any issues and the throughput was ~100 completion per second."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(14737).A+"",width:"1832",height:"637"})}),"\n",(0,a.jsx)(t.p,{children:"We can see that the snapshot was at some point ~650 MB big."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(80148).A+"",width:"1833",height:"918"})}),"\n",(0,a.jsx)(t.h3,{id:"experiment-two",children:"Experiment Two"}),"\n",(0,a.jsxs)(t.p,{children:["As second experiment we wanted to increase the state by factor ",(0,a.jsx)(t.code,{children:"10"}),", which means ",(0,a.jsx)(t.code,{children:"1.000.000"})," instances in the state and then start the worker."]}),"\n",(0,a.jsx)(t.p,{children:"In order to do that we changed the following in the starter configuration:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-shell",children:"$ diff default/starter.yaml zell-chaos/starter.yaml \n24,26c24,26\n<               -Dapp.starter.rate=200\n<               -Dapp.starter.durationLimit=0\n---\n>               -Dapp.starter.rate=100\n>               -Dapp.starter.durationLimit=10000\n"})}),"\n",(0,a.jsx)(t.h4,{id:"expected-1",children:"Expected"}),"\n",(0,a.jsxs)(t.p,{children:["We expect that we can create ",(0,a.jsx)(t.code,{children:"1.000.000"})," instances and can complete them with a rate of ",(0,a.jsx)(t.code,{children:"~100"}),", as we have seen in other experiments."]}),"\n",(0,a.jsx)(t.h4,{id:"actual-1",children:"Actual"}),"\n",(0,a.jsxs)(t.p,{children:["We were ",(0,a.jsx)(t.strong,{children:"not"})," able to create all instances without issues."]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(37457).A+"",width:"1825",height:"643"})}),"\n",(0,a.jsx)(t.p,{children:"We see that at some point the throughput drops and backpressure seem to kick in. When this happens the state is only a bit bigger than in the previous experiment"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(4223).A+"",width:"1838",height:"878"})}),"\n",(0,a.jsx)(t.p,{children:"The running instances seem to be around ~170K at this time."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(64933).A+"",width:"1828",height:"653"})}),"\n",(0,a.jsx)(t.p,{children:"We can see that the processing queue increased at the same time and reached a critical point (over 150 records in the backlog)."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(61837).A+"",width:"1827",height:"300"})}),"\n",(0,a.jsx)(t.p,{children:"The overall latency seems to increase after this time (which makes sense)"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(70258).A+"",width:"1828",height:"786"})}),"\n",(0,a.jsx)(t.p,{children:"We haven't started the workers for this experiment, since the throughput already break before."}),"\n",(0,a.jsx)(t.h3,{id:"experiment-three",children:"Experiment Three"}),"\n",(0,a.jsxs)(t.p,{children:["In order to make sure that this is related to the state we run an experiment with the ",(0,a.jsx)(t.a,{href:"https://github.com/camunda-cloud/zeebe/blob/develop/benchmarks/setup/default/simpleStarter.yaml",children:"simpleStarter"}),". This starter starts a process, which contains only a start and end event."]}),"\n",(0,a.jsx)(t.p,{children:"We let this starter run for more than one day and haven't experienced any issues on this one."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:s(89537).A+"",width:"1830",height:"914"})}),"\n",(0,a.jsx)(t.h2,{id:"result",children:"Result"}),"\n",(0,a.jsx)(t.p,{children:"As written above the throughput seem to break, after we reach a certain state size."}),"\n",(0,a.jsx)(t.p,{children:"It might be just a trigger to get the system into stumblling, which means: after one thing takes a bit longer the processing queue gets longer and the processor is not able to catch up any more. This causes then backpressure to kick in etc."}),"\n",(0,a.jsx)(t.p,{children:"I think we need to further investigate this."})]})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},32412:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp1-100k-instances-ed40fdd974ae9c8814edac7067da9732.png"},14737:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp1-completion-abed9e37390c8651d43576a0a0d040d7.png"},80148:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp1-state-abdb40eedb529ef2dcb2a34d841b3327.png"},70258:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp2-latency-5d21d638de8b582d99853871ddf73f9f.png"},61837:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp2-queue-080a6c7f13f9b67e38f6c322f9d5f6fa.png"},64933:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp2-running-17d829e56e06a32e935cae47c68aeae6.png"},37457:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp2-starting-general-90285fc89bbadf62e2171be8ded4684f.png"},4223:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp2-state-4b557cf5a0c465d33ea8a378c5b93414.png"},89537:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/exp3-general-1000c96b073da25d9e76e2611d28b747.png"},28453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>h});var n=s(96540);const a={},r=n.createContext(a);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function h(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(r.Provider,{value:t},e.children)}},58654:e=>{e.exports=JSON.parse('{"permalink":"/zeebe-chaos/2021/10/29/Throughput-on-big-state","editUrl":"https://github.com/zeebe-io/zeebe-chaos/blob/master/chaos-days/blog/2021-10-29-Throughput-on-big-state/index.md","source":"@site/blog/2021-10-29-Throughput-on-big-state/index.md","title":"Throughput on big state","description":"In this chaos day we wanted to prove the hypothesis that the throughput should not significantly change even if we have bigger state, see zeebe-chaos#64","date":"2021-10-29T00:00:00.000Z","tags":[{"inline":true,"label":"performance","permalink":"/zeebe-chaos/tags/performance"}],"readingTime":3.145,"hasTruncateMarker":true,"authors":[{"name":"Christopher Kujawa","title":"Chaos Engineer @ Zeebe","url":"https://github.com/ChrisKujawa","page":{"permalink":"/zeebe-chaos/authors/zell"},"imageURL":"https://github.com/ChrisKujawa.png","key":"zell"}],"frontMatter":{"layout":"posts","title":"Throughput on big state","date":"2021-10-29T00:00:00.000Z","categories":["chaos_experiment","bpmn","processing"],"tags":["performance"],"authors":"zell"},"unlisted":false,"prevItem":{"title":"Not produce duplicate Keys","permalink":"/zeebe-chaos/2021/11/11/Not-produce-duplicate-Keys"},"nextItem":{"title":"Recovery (Fail Over) time","permalink":"/zeebe-chaos/2021/10/05/recovery-time"}}')}}]);